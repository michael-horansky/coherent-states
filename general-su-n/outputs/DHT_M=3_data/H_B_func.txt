def B_DHT(t, a, b, c, d):
    DHT_params = {
        "xi" : 2.1,
        "lambda_0" : 0.01,
    }
    if (a + b + c + d) % 2 == 1:
        return(0.0)

    prefix = 1 / (np.pi * np.sqrt(np.power(2, a+b+c+d) * math.factorial(a) * math.factorial(b) * math.factorial(c) * math.factorial(d)))

    H_a = sp.special.hermite(a)
    H_b = sp.special.hermite(b)
    H_c = sp.special.hermite(c)
    H_d = sp.special.hermite(d)

    with warnings.catch_warnings(action="ignore"):
        coefs = (H_a * H_b * H_c * H_d).coeffs # descending powers
    even_coefs = coefs[::-2] # now ascending powers

    coef_sum = even_coefs[0] * np.sqrt(np.pi / 2)
    for tau in range(1, int((a+b+c+d)/2)+1):
        coef_sum += even_coefs[tau] * np.sqrt(np.pi / 2) * (1 / np.power(4, tau)) * sp.special.factorial2(2 * tau - 1)

    result = 0.5 * DHT_params["lambda_0"] * prefix * coef_sum

    if a == b and a == c and a == d:
        result += 1
    return(result)
